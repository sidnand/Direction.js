class Vector{constructor(x,y,z){this.x=x||0;this.y=y||0;this.z=z||0;this.length=Math.sqrt((x*x)+(y*y)+(z*z))}equals(otherVector){if(otherVector.x===this.x&&otherVector.y===this.y&&otherVector.z===this.z){return true}else{return false}}opposite(otherVector){if(otherVector.x===-this.x&&otherVector.y===-this.y&&otherVector.z===-this.z){return true}else{return false}}parallel(otherVector){if(Math.sign(otherVector.x)===Math.sign(this.x)&&Math.sign(otherVector.y)===Math.sign(this.y)&&Math.sign(otherVector.z)===Math.sign(this.z)){return true}else{return false}}antiParallel(otherVector){if(Math.sign(otherVector.x)!==Math.sign(this.x)&&Math.sign(otherVector.y)!==Math.sign(this.y)&&Math.sign(otherVector.z)!==Math.sign(this.z)){return true}else{return false}}normalize(){if(this.length!==0){return new Vector((this.x/this.length),(this.y/this.length),(this.z/this.length))}else{throw new Error('Vectors length is 0');}}add(otherVector){return new Vector(otherVector.x+this.x,otherVector.y+this.y,otherVector.z+this.z)}subtract(otherVector){return new Vector(this.x-otherVector.x,this.y-otherVector.y,this.z-otherVector.z)}multiply(otherVector){return new Vector(otherVector.x*this.x,otherVector.y*this.y,otherVector.z*this.z)}divide(otherVector){if(otherVector.x!==0&&otherVector.y!==0&&otherVector.z!==0){return new Vector(this.x/otherVector.x,this.y/otherVector.y,this.z/otherVector.z)}else{throw new Error("Can't divide by 0");}}dotProduct(otherVector){let addVect=this.add(otherVector);let cosTheta=(addVect.x+addVect.y+addVect.x)/(this.length+otherVector.length);return this.length*otherVector.length*cosTheta}}